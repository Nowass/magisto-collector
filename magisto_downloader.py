import os
import time
import logging
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from webdriver_manager.chrome import ChromeDriverManager
import platform
import os.path

# === KONFIGURACE ===
# Credentials (pouze pro automatick√© p≈ôihl√°≈°en√≠ - lze nechat pr√°zdn√© pro manu√°ln√≠ login)
MAGISTO_EMAIL = ""  # m≈Ø≈æe≈° vymazat pro manu√°ln√≠ login
MAGISTO_PASSWORD = ""  # m≈Ø≈æe≈° vymazat pro manu√°ln√≠ login
DOWNLOAD_DIR = "/home/nowass/Videos/Magisto"  # uprav podle sebe

# Nastaven√≠ prohl√≠≈æeƒçe - "chrome" nebo "brave"
# POZOR: Brave m≈Ø≈æe m√≠t probl√©my s verz√≠ ChromeDriveru - doporuƒçujeme Chrome
BROWSER_TYPE = "chrome"  # zmƒõ≈à na "brave" pokud m√°≈° kompatibiln√≠ verzi

WAIT_AFTER_DOWNLOAD = 10  # vte≈ôiny pro poƒçk√°n√≠ po kliknut√≠ na "Download"
LOGIN_TIMEOUT = 20  # timeout pro nalezen√≠ element≈Ø p≈ôi p≈ôihl√°≈°en√≠
DOWNLOAD_TIMEOUT = 15  # timeout pro nalezen√≠ download tlaƒç√≠tka

# === Nastaven√≠ logov√°n√≠ ===
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('magisto_downloader.log'),
        logging.StreamHandler()
    ]
)

# === Nastaven√≠ prohl√≠≈æeƒçe ===
def get_brave_binary_path():
    """Najde cestu k Brave browseru na r≈Øzn√Ωch OS"""
    system = platform.system()
    
    if system == "Linux":
        brave_paths = [
            "/usr/bin/brave-browser",
            "/usr/bin/brave",
            "/snap/brave/current/usr/bin/brave",
            "/var/lib/flatpak/app/com.brave.Browser/current/active/files/brave",
            "/usr/local/bin/brave-browser",
            "/opt/brave.com/brave/brave-browser"
        ]
    elif system == "Darwin":  # macOS
        brave_paths = [
            "/Applications/Brave Browser.app/Contents/MacOS/Brave Browser"
        ]
    elif system == "Windows":
        brave_paths = [
            "C:\\Program Files\\BraveSoftware\\Brave-Browser\\Application\\brave.exe",
            "C:\\Program Files (x86)\\BraveSoftware\\Brave-Browser\\Application\\brave.exe",
            os.path.expanduser("~\\AppData\\Local\\BraveSoftware\\Brave-Browser\\Application\\brave.exe")
        ]
    else:
        return None
    
    for path in brave_paths:
        if os.path.exists(path):
            return path
    
    return None

def setup_browser_driver():
    """Nastaven√≠ prohl√≠≈æeƒçe (Chrome nebo Brave) s optimalizovan√Ωmi mo≈ænostmi"""
    options = Options()
    options.add_experimental_option("prefs", {
        "download.default_directory": DOWNLOAD_DIR,
        "download.prompt_for_download": False,
        "safebrowsing.enabled": True,
        "profile.default_content_setting_values.notifications": 2  # blokovat notifikace
    })
    options.add_argument("--start-maximized")
    options.add_argument("--disable-blink-features=AutomationControlled")
    options.add_experimental_option("excludeSwitches", ["enable-automation"])
    options.add_experimental_option('useAutomationExtension', False)
    
    # Vytvo≈ôen√≠ downloadovac√≠ slo≈æky
    os.makedirs(DOWNLOAD_DIR, exist_ok=True)
    
    if BROWSER_TYPE.lower() == "brave":
        # Nastaven√≠ pro Brave browser
        brave_path = get_brave_binary_path()
        if brave_path:
            options.binary_location = brave_path
            logging.info(f"Pokou≈°√≠m se pou≈æ√≠t Brave browser: {brave_path}")
            logging.warning("POZOR: Brave m≈Ø≈æe m√≠t probl√©my s verz√≠ ChromeDriveru!")
            logging.info("Pokud se vyskytnou chyby, zmƒõ≈à BROWSER_TYPE na 'chrome'")
        else:
            logging.error("Brave browser nebyl nalezen! P≈ôep√≠n√°m na Chrome...")
            logging.info("Nainstaluj Brave nebo zmƒõ≈à BROWSER_TYPE na 'chrome'")
    else:
        logging.info("Pou≈æ√≠v√°m Chrome browser")
    
    try:
        driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
        driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
        logging.info("Prohl√≠≈æeƒç √∫spƒõ≈°nƒõ spu≈°tƒõn!")
        return driver
    except Exception as e:
        logging.error(f"Chyba p≈ôi spu≈°tƒõn√≠ prohl√≠≈æeƒçe: {e}")
        if BROWSER_TYPE.lower() == "brave":
            logging.error("Probl√©m s Brave browserem - pravdƒõpodobnƒõ nekompatibiln√≠ verze ChromeDriveru")
            logging.info("≈òE≈†EN√ç: Zmƒõ≈à BROWSER_TYPE na 'chrome' v konfiguraci")
            logging.info("Nebo nainstaluj star≈°√≠ verzi Brave nebo novƒõj≈°√≠ verzi ChromeDriveru")
        raise

try:
    driver = setup_browser_driver()
    wait = WebDriverWait(driver, LOGIN_TIMEOUT)
except Exception as e:
    logging.error("Nelze spustit prohl√≠≈æeƒç. Ukonƒçuji script.")
    exit(1)

# === Pomocn√© funkce ===
def check_if_logged_in():
    """Kontrola, zda je u≈æivatel p≈ôihl√°≈°en"""
    try:
        # Kontrola r≈Øzn√Ωch indik√°tor≈Ø p≈ôihl√°≈°en√≠
        login_indicators = [
            # Pozitivn√≠ indik√°tory (kdy≈æ je p≈ôihl√°≈°en)
            "//a[contains(@href, '/video/mine')]",
            "//a[contains(@href, '/my-movies')]",
            "//button[contains(text(), 'Profile')]",
            "//div[contains(@class, 'user-menu')]",
            "[data-test-id*='user']",
            ".user-avatar",
            "//a[contains(text(), 'My Videos')]",
            "//a[contains(text(), 'Dashboard')]"
        ]
        
        for indicator in login_indicators:
            try:
                if indicator.startswith("//"):
                    element = driver.find_element(By.XPATH, indicator)
                else:
                    element = driver.find_element(By.CSS_SELECTOR, indicator)
                if element:
                    logging.info(f"   ‚Üí Nalezen indik√°tor p≈ôihl√°≈°en√≠: {indicator}")
                    return True
            except:
                continue
        
        # Kontrola URL - pokud jsme p≈ôesmƒõrov√°ni na dashboard nebo podobnƒõ
        current_url = driver.current_url
        logged_in_patterns = ['/dashboard', '/video/', '/my-movies', '/profile']
        
        for pattern in logged_in_patterns:
            if pattern in current_url:
                logging.info(f"   ‚Üí URL indikuje p≈ôihl√°≈°en√≠: {current_url}")
                return True
        
        return False
        
    except Exception as e:
        logging.warning(f"Chyba p≈ôi kontrole p≈ôihl√°≈°en√≠: {e}")
        return False

# === KROK 1: P≈ôihl√°≈°en√≠ (Manual Login Support) ===
def login_to_magisto():
    """P≈ôihl√°≈°en√≠ na Magisto s podporou manu√°ln√≠ho p≈ôihl√°≈°en√≠"""
    logging.info("[1/5] Otev√≠r√°m Magisto login str√°nku...")
    
    try:
        # Pou≈æit√≠ p≈ô√≠m√© login URL pro manu√°ln√≠ p≈ôihl√°≈°en√≠
        driver.get("https://www.magisto.com/connect?q_offer_info=eyJpZCI6IjE0MDA1NDcwMjY5NzE3ODc1MzkiLCJleHBpcmF0aW9uIjoxNzUzNjgyMTc3ODQ4fQ%3D%3D")
        
        logging.info("üîê MANU√ÅLN√ç P≈òIHL√Å≈†EN√ç:")
        logging.info("   ‚Üí Otev≈ôel jsem login str√°nku")
        logging.info("   ‚Üí Pros√≠m, p≈ôihlas se ruƒçnƒõ v prohl√≠≈æeƒçi")
        logging.info("   ‚Üí Po p≈ôihl√°≈°en√≠ stiskni ENTER v termin√°lu pro pokraƒçov√°n√≠...")
        
        # ƒåek√°n√≠ na manu√°ln√≠ potvrzen√≠
        input("Stiskni ENTER po dokonƒçen√≠ p≈ôihl√°≈°en√≠...")
        
        # Kontrola, zda je u≈æivatel p≈ôihl√°≈°en
        logged_in = check_if_logged_in()
        
        if logged_in:
            logging.info("‚úÖ P≈ôihl√°≈°en√≠ √∫spƒõ≈°n√©!")
            return True
        else:
            logging.error("‚ùå Zd√° se, ≈æe p≈ôihl√°≈°en√≠ se nezda≈ôilo")
            
            # Pokusit se o automatick√© p≈ôihl√°≈°en√≠ jako fallback
            logging.info("üîÑ Pokou≈°√≠m se o automatick√© p≈ôihl√°≈°en√≠...")
            return attempt_automatic_login()
            
    except Exception as e:
        logging.error(f"Chyba p≈ôi p≈ôihla≈°ov√°n√≠: {e}")
        return False

def attempt_automatic_login():
    """Pokus o automatick√© p≈ôihl√°≈°en√≠ jako fallback"""
    
    # Kontrola, zda jsou zadan√© credentials
    if not MAGISTO_EMAIL or not MAGISTO_PASSWORD:
        logging.warning("‚ùå Credentials nejsou nastaveny - automatick√© p≈ôihl√°≈°en√≠ nelze prov√©st")
        logging.info("üí° Nastav MAGISTO_EMAIL a MAGISTO_PASSWORD v konfiguraci pro automatick√© p≈ôihl√°≈°en√≠")
        return False
    
    try:
        logging.info("Hled√°m login formul√°≈ô...")
        
        # Hled√°n√≠ login tlaƒç√≠tka nebo formul√°≈ôe
        login_selectors = [
            "//a[contains(text(),'Log in')]",
            "//a[contains(text(),'Sign in')]",
            "//button[contains(text(),'Log in')]",
            "//button[contains(text(),'Sign in')]",
            ".login-btn",
            "[data-test-id='login-button']",
            "input[name='email']"  # P≈ô√≠m√© hled√°n√≠ email pole
        ]
        
        login_element = None
        for selector in login_selectors:
            try:
                if selector.startswith("//"):
                    login_element = WebDriverWait(driver, 5).until(
                        EC.presence_of_element_located((By.XPATH, selector))
                    )
                else:
                    login_element = WebDriverWait(driver, 5).until(
                        EC.presence_of_element_located((By.CSS_SELECTOR, selector))
                    )
                break
            except TimeoutException:
                continue
        
        if not login_element:
            logging.warning("Login formul√°≈ô nebyl nalezen")
            return False
        
        # Pokud najdeme p≈ô√≠mo email pole, jsme u≈æ na login str√°nce
        if login_element.get_attribute("name") == "email":
            email_input = login_element
        else:
            # Kliknout na login tlaƒç√≠tko
            login_element.click()
            time.sleep(3)
            # Naj√≠t email pole
            email_input = WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.NAME, "email"))
            )
        
        password_input = driver.find_element(By.NAME, "password")
        
        email_input.clear()
        email_input.send_keys(MAGISTO_EMAIL)
        password_input.clear()
        password_input.send_keys(MAGISTO_PASSWORD)
        password_input.send_keys(Keys.RETURN)
        
        # Poƒçk√°n√≠ na p≈ôihl√°≈°en√≠
        time.sleep(8)
        return check_if_logged_in()
        
    except Exception as e:
        logging.error(f"Automatick√© p≈ôihl√°≈°en√≠ selhalo: {e}")
        return False

# Spu≈°tƒõn√≠ p≈ôihl√°≈°en√≠
logging.info("üöÄ Zaƒç√≠n√°m proces p≈ôihl√°≈°en√≠...")

# Nejd≈ô√≠ve zkontrolovat, jestli u≈æ nejsme p≈ôihl√°≈°eni
if check_if_logged_in():
    logging.info("‚úÖ U≈æ jste p≈ôihl√°≈°eni! P≈ôeskakuji login proces.")
else:
    if not login_to_magisto():
        logging.error("‚ùå P≈ôihl√°≈°en√≠ selhalo, ukonƒçuji script")
        driver.quit()
        exit(1)

# === KROK 2: Naƒç√≠st videa (nekoneƒçn√© scrollov√°n√≠) ===
def load_all_videos():
    """Naƒçten√≠ v≈°ech vide√≠ pomoc√≠ nekoneƒçn√©ho scrollov√°n√≠"""
    logging.info("[2/5] Naƒç√≠t√°m videa...")
    
    current_url = driver.current_url
    logging.info(f"Aktu√°ln√≠ URL po p≈ôihl√°≈°en√≠: {current_url}")
    
    # Nejd≈ô√≠ve zkontrolovat, zda u≈æ nejsme na str√°nce s videi
    if '/video/' in current_url or '/my-movies' in current_url or 'mine' in current_url:
        logging.info("‚úÖ U≈æ jsme na str√°nce s videi! P≈ôeskakuji navigaci.")
        # Zkusit naj√≠t videa na aktu√°ln√≠ str√°nce
        if check_for_videos_on_page():
            logging.info("‚úÖ Videa nalezena na aktu√°ln√≠ str√°nce")
        else:
            logging.info("‚ö†Ô∏è Na aktu√°ln√≠ str√°nce nejsou videa, zkou≈°√≠m jin√© URL...")
            return try_alternative_video_urls()
    else:
        # Pokud nejsme na str√°nce s videi, zkusit navigovat
        logging.info("üìç Navigace na str√°nku s videi...")
        return try_alternative_video_urls()
    
    # Nekoneƒçn√© scrollov√°n√≠ na aktu√°ln√≠ str√°nce
    return perform_infinite_scroll_and_collect()

def check_for_videos_on_page():
    """Zkontroluje, zda jsou na aktu√°ln√≠ str√°nce videa"""
    try:
        video_selectors = [
            "a[data-test-id='movie-card']",
            "a[data-testid*='movie']",
            "a[data-testid*='video']",
            ".video-card",
            ".movie-card",
            "a[href*='/video/']",
            "a[href*='/movie/']",
            "[data-test*='video']",
            "[data-test*='movie']"
        ]
        
        for selector in video_selectors:
            try:
                elements = driver.find_elements(By.CSS_SELECTOR, selector)
                if elements:
                    logging.info(f"   ‚Üí Nalezeno {len(elements)} vide√≠ pomoc√≠ selektoru: {selector}")
                    return True
            except:
                continue
        
        return False
    except Exception as e:
        logging.warning(f"Chyba p≈ôi kontrole vide√≠: {e}")
        return False

def try_alternative_video_urls():
    """Zkus√≠ r≈Øzn√© URL pro str√°nku s videi"""
    video_urls_to_try = [
        # Nezkou≈°et znovu aktu√°ln√≠ URL pokud u≈æ tam jsme
        None,  # placeholder pro aktu√°ln√≠ URL
        "https://www.magisto.com/video/mine",
        "https://www.magisto.com/my-movies",
        "https://www.magisto.com/videos",
        "https://www.magisto.com/dashboard",
        "https://www.magisto.com/library",
        "https://www.magisto.com/home"
    ]
    
    current_url = driver.current_url
    
    # Pokud u≈æ jsme na nƒõkter√© z target URL, zaƒç√≠t p≈ô√≠mo scrollov√°n√≠m
    for target_url in video_urls_to_try[1:]:  # Skip None placeholder
        if target_url and target_url in current_url:
            logging.info(f"‚úÖ U≈æ jsme na target URL: {current_url}")
            return perform_infinite_scroll_and_collect()
    
    # Zkusit navigovat na r≈Øzn√© URL
    for idx, url in enumerate(video_urls_to_try[1:], 1):  # Skip None placeholder
        try:
            logging.info(f"üîÑ Zkou≈°√≠m URL {idx}: {url}")
            driver.get(url)
            time.sleep(5)
            
            # Kontrola, zda se str√°nka naƒçetla √∫spƒõ≈°nƒõ
            if "error" in driver.title.lower() or "not found" in driver.page_source.lower():
                logging.warning(f"   ‚ùå URL {url} vr√°til chybu")
                continue
            
            # Kontrola, zda jsou videa na str√°nce
            if check_for_videos_on_page():
                logging.info(f"‚úÖ √öspƒõ≈°nƒõ naƒçteno na URL: {url}")
                return perform_infinite_scroll_and_collect()
            else:
                logging.info(f"   ‚ö†Ô∏è Na URL {url} nejsou videa")
                
        except Exception as e:
            logging.warning(f"   ‚ùå URL {url} selhalo: {e}")
            continue
    
    logging.error("‚ùå Nepoda≈ôilo se naƒç√≠st ≈æ√°dnou str√°nku s videi")
    return []

def perform_infinite_scroll_and_collect():
    """Provede nekoneƒçn√© scrollov√°n√≠ a sebere v≈°echna videa"""
    logging.info("üîÑ Spou≈°t√≠m nekoneƒçn√© scrollov√°n√≠...")
    
    # Nekoneƒçn√© scrollov√°n√≠
    last_height = driver.execute_script("return document.body.scrollHeight")
    scroll_tries = 0
    MAX_SCROLL_TRIES = 15
    
    while scroll_tries < MAX_SCROLL_TRIES:
        driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
        time.sleep(3)
        new_height = driver.execute_script("return document.body.scrollHeight")
        
        if new_height == last_height:
            scroll_tries += 1
            logging.info(f"   üìú Scroll pokus {scroll_tries}/{MAX_SCROLL_TRIES}")
        else:
            scroll_tries = 0
            last_height = new_height
            logging.info("   üìú Naƒç√≠t√°m dal≈°√≠ videa...")
    
    logging.info("[3/5] ‚úÖ Scrollov√°n√≠ dokonƒçeno, sb√≠r√°m odkazy na videa...")
    
    # Nalezen√≠ v≈°ech video odkaz≈Ø pomoc√≠ r≈Øzn√Ωch selector≈Ø
    video_selectors = [
        "a[data-test-id='movie-card']",
        "a[data-testid*='movie']", 
        "a[data-testid*='video']",
        ".video-card a",
        ".movie-card a",
        "a[href*='/video/'][href!='/video/mine']",  # Exclude the main page
        "a[href*='/movie/'][href!='/my-movies']",   # Exclude the main page
        "[data-test*='video'] a",
        "[data-test*='movie'] a",
        # More specific selectors for Magisto
        "div[class*='video'] a",
        "div[class*='movie'] a",
        "article a[href*='/video/']",
        ".thumbnail a",
        ".video-thumbnail a"
    ]
    
    all_video_links = []
    for selector in video_selectors:
        try:
            links = driver.find_elements(By.CSS_SELECTOR, selector)
            if links:
                logging.info(f"   ‚Üí Selector '{selector}': {len(links)} odkaz≈Ø")
            all_video_links.extend(links)
        except Exception as e:
            logging.debug(f"   ‚ö†Ô∏è Selector '{selector}' selhal: {e}")
            continue
    
    # Odstranƒõn√≠ duplik√°t≈Ø a z√≠sk√°n√≠ URL
    video_urls = []
    seen_urls = set()
    
    for link in all_video_links:
        try:
            href = link.get_attribute("href")
            if href and href not in seen_urls:
                # Kontrola, zda URL obsahuje video identifik√°tor a NEN√ç to main page
                if (any(pattern in href for pattern in ['/video/', '/movie/', '/watch/', '/view/']) and
                    not any(excluded in href for excluded in ['/video/mine', '/my-movies', '/videos', '/dashboard'])):
                    
                    # Extra kontrola - URL by mƒõlo m√≠t nƒõjak√Ω ID na konci
                    if len(href.split('/')[-1]) > 3:  # Minim√°ln√≠ d√©lka ID
                        video_urls.append(href)
                        seen_urls.add(href)
        except:
            continue
    
    logging.info(f"üé¨ Nalezeno celkem {len(video_urls)} unik√°tn√≠ch vide√≠")
    
    # Zobrazit nƒõkolik p≈ô√≠klad≈Ø URL pro debugging
    if video_urls:
        logging.info("üìã P≈ô√≠klady nalezen√Ωch video URL:")
        for i, url in enumerate(video_urls[:5]):  # Zobrazit prvn√≠ch 5
            logging.info(f"   {i+1}. {url}")
        if len(video_urls) > 5:
            logging.info(f"   ... a dal≈°√≠ch {len(video_urls) - 5} vide√≠")
    else:
        # Debug info pokud nejsou nalezena ≈æ√°dn√° videa
        logging.warning("‚ö†Ô∏è Nebyla nalezena ≈æ√°dn√° videa! Debug info:")
        
        # Zkusit naj√≠t v≈°echny odkazy na str√°nce
        all_links = driver.find_elements(By.CSS_SELECTOR, "a[href]")
        logging.info(f"   Celkem nalezeno {len(all_links)} odkaz≈Ø na str√°nce")
        
        # Zobrazit prvn√≠ch 10 odkaz≈Ø pro debugging
        for i, link in enumerate(all_links[:10]):
            try:
                href = link.get_attribute("href")
                text = link.text.strip()[:50]  # Prvn√≠ 50 znak≈Ø textu
                logging.info(f"   {i+1}. {href} (text: '{text}')")
            except:
                continue
    
    return video_urls

video_urls = load_all_videos()

if not video_urls:
    logging.error("‚ùå Nebyla nalezena ≈æ√°dn√° videa.")
    logging.info("üîç DEBUG INFO:")
    logging.info(f"   Aktu√°ln√≠ URL: {driver.current_url}")
    logging.info(f"   Titulek str√°nky: {driver.title}")
    
    # V√Ωpis nƒõkolika element≈Ø na str√°nce pro debugging
    try:
        # Zkusit naj√≠t v≈°echny odkazy na str√°nce
        all_links = driver.find_elements(By.CSS_SELECTOR, "a[href]")
        logging.info(f"   Celkem nalezeno {len(all_links)} odkaz≈Ø na str√°nce")
        
        # Naj√≠t odkazy s 'video' v URL
        video_links = [link for link in all_links if '/video/' in link.get_attribute("href")]
        logging.info(f"   Z toho {len(video_links)} obsahuje '/video/' v URL")
        
        # Zobrazit prvn√≠ch 10 video odkaz≈Ø
        logging.info("   P≈ô√≠klady nalezen√Ωch '/video/' odkaz≈Ø:")
        for i, link in enumerate(video_links[:10]):
            try:
                href = link.get_attribute("href")
                text = link.text.strip()[:30] if link.text.strip() else "No text"
                logging.info(f"     {i+1}. {href} ('{text}')")
            except:
                continue
        
        # Zkusit naj√≠t jak√©koliv obr√°zky, kter√© by mohly b√Ωt thumbnaily
        images = driver.find_elements(By.CSS_SELECTOR, "img")
        logging.info(f"   Nalezeno {len(images)} obr√°zk≈Ø na str√°nce")
        
        # Ulo≈æit screenshot pro debugging
        try:
            screenshot_path = "debug_page_screenshot.png"
            driver.save_screenshot(screenshot_path)
            logging.info(f"   üì∏ Screenshot ulo≈æen: {screenshot_path}")
        except:
            pass
        
    except Exception as e:
        logging.warning(f"   Chyba p≈ôi debugging: {e}")
    
    logging.info("üí° N√ÅVRHY:")
    logging.info("   1. Zkontroluj ruƒçnƒõ, zda vid√≠≈° videa v prohl√≠≈æeƒçi")
    logging.info("   2. Mo≈æn√° Magisto zmƒõnil strukturu str√°nek")
    logging.info("   3. Zkus poƒçkat d√©le na naƒçten√≠ str√°nky")
    
    driver.quit()
    exit(1)

# Extra validace nalezen√Ωch URL
logging.info("üîç Kontroluji kvalitu nalezen√Ωch URL...")
valid_video_urls = []
invalid_urls = []

for url in video_urls:
    # Kontrola, zda URL vypad√° jako jednotliv√© video
    if (url.count('/') >= 4 and  # Minim√°ln√≠ struktura URL
        not any(excluded in url for excluded in ['/mine', '/my-movies', '/videos', '/dashboard']) and
        len(url.split('/')[-1]) >= 5):  # ID videa m√° aspo≈à 5 znak≈Ø
        valid_video_urls.append(url)
    else:
        invalid_urls.append(url)

if invalid_urls:
    logging.warning(f"‚ö†Ô∏è Vy≈ôazeno {len(invalid_urls)} neplatn√Ωch URL:")
    for invalid_url in invalid_urls[:5]:  # Zobrazit jen prvn√≠ch 5
        logging.warning(f"   - {invalid_url}")

video_urls = valid_video_urls
logging.info(f"‚úÖ Fin√°ln√≠ poƒçet platn√Ωch video URL: {len(video_urls)}")

if not video_urls:
    logging.error("‚ùå Po validaci nezbylo ≈æ√°dn√© platn√© video URL!")
    driver.quit()
    exit(1)

# === KROK 3: St√°hni ka≈æd√© video ===
def get_video_id_from_url(video_url):
    """Extrahuje video ID z URL pro identifikaci sta≈æen√Ωch soubor≈Ø"""
    try:
        # Nap≈ô. https://www.magisto.com/video/P14WY1NQHDE9VQNhCzE -> P14WY1NQHDE9VQNhCzE
        return video_url.split('/')[-1]
    except:
        return None

def get_video_name_from_widget(driver):
    """Z√≠sk√° n√°zev videa p≈ô√≠mo z video widgetu (tam kde je i download tlaƒç√≠tko)"""
    try:
        # Mo≈æn√© selektory pro n√°zev videa v r√°mci video widgetu
        video_name_selectors = [
            "h1",  # ƒåasto hlavn√≠ nadpis
            "h2", 
            "h3",
            ".video-title",
            ".title", 
            ".video-name",
            ".media-title",
            "[data-test-id='video-title']",
            "[data-testid='video-title']",
            # Hledat text v bl√≠zkosti download tlaƒç√≠tka
            "//span[contains(text(),'Download')]/../..//h1",
            "//span[contains(text(),'Download')]/../..//h2", 
            "//span[contains(text(),'Download')]/../..//h3",
            "//span[contains(text(),'Download')]/../preceding-sibling::*//*[string-length(text()) > 3]",
            "//span[contains(text(),'Download')]/../following-sibling::*//*[string-length(text()) > 3]"
        ]
        
        for selector in video_name_selectors:
            try:
                if selector.startswith("//"):
                    title_element = driver.find_element(By.XPATH, selector)
                else:
                    title_element = driver.find_element(By.CSS_SELECTOR, selector)
                
                title = title_element.text.strip()
                
                # Filtrovat ne≈æ√°douc√≠ texty
                if (title and len(title) > 2 and 
                    "Magisto" not in title and 
                    "Download" not in title and
                    "Page not Found" not in title and
                    not title.isdigit() and  # Nen√≠ jen ƒç√≠slo
                    ":" not in title):  # Nen√≠ ƒçasov√Ω k√≥d
                    
                    logging.info(f"   üìù Nalezen n√°zev videa: '{title}'")
                    return title
            except:
                continue
                
        logging.warning("   ‚ö†Ô∏è Nepoda≈ôilo se naj√≠t n√°zev videa ve widgetu")
        return None
        
    except Exception as e:
        logging.error(f"   ‚ùå Chyba p≈ôi z√≠sk√°v√°n√≠ n√°zvu videa: {e}")
        return None

def is_video_already_downloaded_by_name(driver, video_url, download_dir):
    """Kontroluje, zda je video ji≈æ sta≈æeno - vylep≈°en√° verze pou≈æ√≠vaj√≠c√≠ n√°zev z widgetu"""
    import glob
    
    video_id = get_video_id_from_url(video_url)
    if not video_id:
        return False, None
    
    # Metoda 1: Hledat podle video ID v n√°zvu souboru
    search_patterns = [
        f"*{video_id}*.mp4",
        f"*{video_id}*.mov", 
        f"*{video_id}*.avi",
        f"*{video_id}*.mkv",
        f"*{video_id}*.webm"
    ]
    
    for pattern in search_patterns:
        matching_files = glob.glob(os.path.join(download_dir, pattern))
        if matching_files:
            return True, matching_files[0]
    
    # Metoda 2: Hledat podle mapov√°n√≠ URL -> soubor
    mapping_file = os.path.join(download_dir, "download_mapping.txt")
    if os.path.exists(mapping_file):
        try:
            with open(mapping_file, 'r', encoding='utf-8') as f:
                for line in f:
                    if '|' in line:
                        saved_url, saved_file = line.strip().split('|', 1)
                        if saved_url == video_url:
                            full_path = os.path.join(download_dir, saved_file)
                            if os.path.exists(full_path):
                                return True, full_path
        except:
            pass
    
    # Metoda 3: NOV√Å - Kontrola podle n√°zvu z video widgetu
    logging.info(f"   üîç Z√≠sk√°v√°m n√°zev videa z widgetu...")
    
    # Str√°nka u≈æ je naƒçten√°, jen z√≠sk√°me n√°zev
    video_name = get_video_name_from_widget(driver)
    
    if video_name:
        logging.info(f"   üîç Hled√°m soubory pro n√°zev '{video_name}'...")
        
        # Hledat soubory zaƒç√≠naj√≠c√≠ n√°zvem videa s r≈Øzn√Ωmi p≈ô√≠ponami
        video_extensions = ['mp4', 'avi', 'mov', 'mkv', 'wmv', 'webm']
        
        for ext in video_extensions:
            # Metoda 3a: P≈ôesn√° shoda pro kr√°tk√© n√°zvy
            exact_patterns = [
                f"{video_name}.{ext}",
                f"{video_name}_HD.{ext}",
                f"{video_name}_FULL_HD.{ext}",
                f"{video_name}_HQ.{ext}",
                f"{video_name}_FULL.{ext}"
            ]
            
            for pattern_name in exact_patterns:
                full_path = os.path.join(download_dir, pattern_name)
                if os.path.exists(full_path):
                    logging.info(f"   ‚úÖ Nalezeno p≈ôesnou shodou: '{pattern_name}'")
                    return True, full_path
            
            # Metoda 3b: Wildcard pro dlouh√© n√°zvy (pro p≈ô√≠pad, ≈æe by Magisto nezkr√°til)
            pattern = os.path.join(download_dir, f"{video_name}*.{ext}")
            matching_files = glob.glob(pattern)
            
            if matching_files:
                filename = os.path.basename(matching_files[0])
                logging.info(f"   ‚úÖ Nalezeno wildcard shodou: '{filename}'")
                return True, matching_files[0]
        
        # Metoda 3c: NOV√Å - Kontrola zkr√°cen√Ωch n√°zv≈Ø (a≈æ 20 znak≈Ø + kvalita)
        # Magisto zkracuje dlouh√© n√°zvy na ~20 znak≈Ø a p≈ôid√°v√° _FULL_HD, _HD, atd.
        if len(video_name) > 20:
            truncated_name = video_name[:20]  # Prvn√≠ch 20 znak≈Ø
            logging.info(f"   üîç N√°zev je dlouh√Ω ({len(video_name)} znak≈Ø), zkou≈°√≠m zkr√°cenou verzi: '{truncated_name}'")
            
            for ext in video_extensions:
                # Hledat soubory zaƒç√≠naj√≠c√≠ zkr√°cen√Ωm n√°zvem
                truncated_patterns = [
                    f"{truncated_name}*.{ext}",  # Wildcard pro jak√©koliv zakonƒçen√≠
                ]
                
                for pattern in truncated_patterns:
                    matching_files = glob.glob(os.path.join(download_dir, pattern))
                    
                    for match in matching_files:
                        filename = os.path.basename(match)
                        # Ovƒõ≈ôit, ≈æe soubor skuteƒçnƒõ zaƒç√≠n√° n√°zvem videa (ne jen n√°hodou)
                        if filename.lower().startswith(truncated_name.lower()):
                            logging.info(f"   ‚úÖ Nalezeno podle zkr√°cen√©ho n√°zvu: '{filename}'")
                            return True, match
        
        # Metoda 3d: Flexibiln√≠ hled√°n√≠ podle zaƒç√°tku n√°zvu (pro r≈Øzn√© d√©lky zkr√°cen√≠)
        # Zkus√≠me r≈Øzn√© d√©lky zkr√°cen√≠ (15-25 znak≈Ø)
        for truncate_length in range(15, min(26, len(video_name) + 1)):
            if truncate_length >= len(video_name):
                continue  # U≈æ jsme zkou≈°eli p≈ôesnou shodu
                
            truncated = video_name[:truncate_length]
            
            for ext in video_extensions:
                pattern = os.path.join(download_dir, f"{truncated}*.{ext}")
                matching_files = glob.glob(pattern)
                
                for match in matching_files:
                    filename = os.path.basename(match)
                    # Ovƒõ≈ôit, ≈æe se jedn√° o stejn√© video (zaƒç√°tek n√°zvu se shoduje)
                    base_name = os.path.splitext(filename)[0]  # Bez p≈ô√≠pony
                    # Odstranit kvalitativn√≠ sufixy
                    clean_base = base_name.replace('_FULL_HD', '').replace('_HD', '').replace('_HQ', '').replace('_FULL', '')
                    
                    if clean_base.lower().startswith(truncated.lower()) and len(clean_base) <= len(video_name):
                        logging.info(f"   ‚úÖ Nalezeno flexibiln√≠m hled√°n√≠m (zkr√°ceno na {truncate_length} znak≈Ø): '{filename}'")
                        return True, match
        
        logging.info(f"   ‚ùå ≈Ω√°dn√Ω soubor pro n√°zev '{video_name}' nenalezen (ani zkr√°cen√Ω)")
    else:
        logging.warning("   ‚ö†Ô∏è Nepoda≈ôilo se z√≠skat n√°zev videa z widgetu")
    
    return False, None

def save_download_mapping(video_url, downloaded_file, download_dir):
    """Ulo≈æ√≠ mapov√°n√≠ URL -> n√°zev souboru pro budouc√≠ skip detekci"""
    try:
        mapping_file = os.path.join(download_dir, "download_mapping.txt")
        file_name = os.path.basename(downloaded_file)
        
        # Zkontrolovat, zda u≈æ mapov√°n√≠ neexistuje
        existing_mappings = set()
        if os.path.exists(mapping_file):
            try:
                with open(mapping_file, 'r', encoding='utf-8') as f:
                    existing_mappings = set(line.strip() for line in f)
            except:
                pass
        
        new_mapping = f"{video_url}|{file_name}"
        if new_mapping not in existing_mappings:
            with open(mapping_file, 'a', encoding='utf-8') as f:
                f.write(f"{new_mapping}\n")
    except Exception as e:
        logging.warning(f"Nepoda≈ôilo se ulo≈æit mapov√°n√≠: {e}")

def download_video(video_url, video_index, total_videos):
    """St√°hnut√≠ jednoho videa s error handlingem a vylep≈°enou skip kontrolou podle n√°zvu"""
    import glob
    import os
    
    download_dir = DOWNLOAD_DIR  # Pou≈æ√≠t spr√°vnou configured cestu!
    
    try:
        # Naƒç√≠st str√°nku s videem
        driver.get(video_url)
        time.sleep(3)  # ƒåek√°n√≠ pro naƒçten√≠ str√°nky
        
        # NOV√ù P≈ò√çSTUP: Nejd≈ô√≠v zkontrolovat skip detection s naƒçtenou str√°nkou
        already_downloaded, existing_file = is_video_already_downloaded_by_name(driver, video_url, download_dir)
        
        if already_downloaded:
            logging.info(f"[4/5] ({video_index}/{total_videos}) ‚è≠Ô∏è  P≈òESKAKUJI - u≈æ sta≈æeno: {os.path.basename(existing_file)}")
            return True  # Poƒç√≠t√°me jako √∫spƒõch
        
        logging.info(f"[4/5] ({video_index}/{total_videos}) Nav≈°tƒõvuji {video_url}")
        
        # Str√°nka u≈æ je naƒçten√°, jen poƒçk√°me na widget
        time.sleep(5)  # Dodateƒçn√© ƒçek√°n√≠ pro naƒçten√≠ video widgetu
        
        # OPRAVEN√â selektory pro download tlaƒç√≠tko
        download_selectors = [
            "//span[contains(text(),'Download')]",  # ‚úÖ Hlavn√≠ selector - SPAN element
            "//button[contains(text(),'Download')]",
            "//button[contains(text(),'download')]",
            "//a[contains(text(),'Download')]",
            "//a[contains(text(),'download')]",
            "//button[contains(@class,'download')]",
            "//a[contains(@class,'download')]",
            "//span[contains(@class,'download')]",  # P≈ôid√°no pro span elementy
            "[data-test-id*='download']",
            "[data-testid*='download']",
            ".download-btn",
            ".download-button"
        ]
        
        download_btn = None
        download_wait = WebDriverWait(driver, DOWNLOAD_TIMEOUT)
        
        for selector in download_selectors:
            try:
                if selector.startswith("//"):
                    download_btn = download_wait.until(EC.element_to_be_clickable((By.XPATH, selector)))
                else:
                    download_btn = download_wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, selector)))
                break
            except TimeoutException:
                continue
        
        if download_btn:
            # Ulo≈æit seznam soubor≈Ø p≈ôed kliknut√≠m
            initial_files = set(glob.glob(os.path.join(download_dir, "*")))
            
            download_btn.click()
            logging.info("     ‚Üí Kliknuto na Download tlaƒç√≠tko...")
            
            # Poƒçkat chv√≠li a zkontrolovat, jestli se neobjevil popup
            time.sleep(3)
            
            # OPRAVEN√â selektory pro potvrzovac√≠ popup pro star≈°√≠ videa
            confirmation_selectors = [
                "//button[contains(text(),'Download')]",  # Druh√© download tlaƒç√≠tko v popupu
                "//span[contains(text(),'Download')]",   # Druh√© download span v popupu
                "//button[contains(text(),'Confirm')]",
                "//button[contains(text(),'OK')]",
                "//button[contains(text(),'Yes')]",
                "//div[@class='modal']//button[contains(text(),'Download')]",
                "//div[@class='popup']//button[contains(text(),'Download')]",
                "//div[@class='dialog']//button[contains(text(),'Download')]"
            ]
            
            popup_found = False
            for selector in confirmation_selectors:
                try:
                    # V≈°echny jsou XPath selektory
                    confirmation_btn = WebDriverWait(driver, 5).until(
                        EC.element_to_be_clickable((By.XPATH, selector))
                    )
                    
                    # Ovƒõ≈ôit, ≈æe to nen√≠ stejn√© tlaƒç√≠tko jako p≈ôedt√≠m
                    if confirmation_btn != download_btn:
                        confirmation_btn.click()
                        logging.info("     ‚Üí Potvrzeno v popup dialogu...")
                        popup_found = True
                        break
                except TimeoutException:
                    continue
            
            if not popup_found:
                logging.info("     ‚Üí ≈Ω√°dn√Ω popup nebyl detekov√°n")
            
            # ƒåek√°n√≠ na zaƒç√°tek downloadu
            time.sleep(WAIT_AFTER_DOWNLOAD)
            
            # Zkontrolujeme, jestli se objevil nov√Ω soubor
            final_files = set(glob.glob(os.path.join(download_dir, "*")))
            new_files = final_files - initial_files
            
            if new_files:
                new_file_path = list(new_files)[0]
                new_file_name = os.path.basename(new_file_path)
                logging.info(f"     ‚úÖ Nov√Ω soubor sta≈æen: {new_file_name}")
                
                # Ulo≈æit mapov√°n√≠ pro budouc√≠ skip detekci
                save_download_mapping(video_url, new_file_path, download_dir)
            else:
                logging.info("     ‚è≥ Download mo≈æn√° st√°le prob√≠h√°...")
            
            return True
        else:
            logging.warning("     ‚ùå Chyba: tlaƒç√≠tko 'Download' nenalezeno.")
            return False
            
    except Exception as e:
        logging.error(f"     ‚ùå Chyba p≈ôi zpracov√°n√≠ videa {video_url}: {e}")
        return False

# Hlavn√≠ loop pro stahov√°n√≠
successful_downloads = 0
failed_downloads = 0
skipped_downloads = 0

logging.info(f"üöÄ Zahajuji stahov√°n√≠ {len(video_urls)} vide√≠...")
logging.info("   (Ji≈æ sta≈æen√° videa budou automaticky p≈ôeskoƒçena)")

for idx, url in enumerate(video_urls, 1):
    # Kontrola, zda u≈æ nen√≠ video sta≈æen√© (pro statistiky p≈ôed vol√°n√≠m download_video)
    download_dir = DOWNLOAD_DIR  # Pou≈æ√≠t spr√°vnou configured cestu!
    
    # Kr√°tce naƒç√≠st str√°nku pro kontrolu
    already_downloaded = False
    try:
        driver.get(url)
        time.sleep(2)
        already_downloaded, _ = is_video_already_downloaded_by_name(driver, url, download_dir)
    except:
        already_downloaded = False
    
    if download_video(url, idx, len(video_urls)):
        if already_downloaded:
            skipped_downloads += 1
        else:
            successful_downloads += 1
    else:
        failed_downloads += 1

logging.info("=" * 60)
logging.info(f"[5/5] ‚úÖ DOKONƒåENO! Celkov√© statistiky:")
logging.info(f"   üì• Novƒõ sta≈æeno: {successful_downloads}")
logging.info(f"   ‚è≠Ô∏è  P≈ôeskoƒçeno (u≈æ sta≈æeno): {skipped_downloads}")
logging.info(f"   ‚ùå Chyby: {failed_downloads}")
logging.info(f"   üìä Celkem zpracov√°no: {successful_downloads + skipped_downloads + failed_downloads}")

# Zobrazit informace o sta≈æen√Ωch souborech
download_dir = DOWNLOAD_DIR  # Pou≈æ√≠t spr√°vnou configured cestu!
if os.path.exists(download_dir):
    import glob
    all_videos = []
    for ext in ['*.mp4', '*.mov', '*.avi', '*.mkv', '*.webm']:
        all_videos.extend(glob.glob(os.path.join(download_dir, ext)))
    
    logging.info(f"üìÅ Celkem vide√≠ ve slo≈æce downloads: {len(all_videos)}")
    
    # Zobrazit velikost slo≈æky
    try:
        total_size = sum(os.path.getsize(f) for f in all_videos if os.path.isfile(f))
        size_gb = total_size / (1024**3)
        logging.info(f"üíæ Celkov√° velikost: {size_gb:.2f} GB")
    except:
        pass

logging.info("=" * 60)
driver.quit()

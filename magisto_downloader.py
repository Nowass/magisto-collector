import os
import time
import logging
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from webdriver_manager.chrome import ChromeDriverManager
import platform
import os.path

# === KONFIGURACE ===
DOWNLOAD_DIR = "/home/nowass/Videos/Magisto"  # uprav podle sebe

# Nastaven√≠ prohl√≠≈æeƒçe - "chrome" nebo "brave"
# POZOR: Brave m≈Ø≈æe m√≠t probl√©my s verz√≠ ChromeDriveru - doporuƒçujeme Chrome
BROWSER_TYPE = "chrome"  # zmƒõ≈à na "brave" pokud m√°≈° kompatibiln√≠ verzi

WAIT_AFTER_DOWNLOAD = 10  # vte≈ôiny pro poƒçk√°n√≠ po kliknut√≠ na "Download"
LOGIN_TIMEOUT = 20  # timeout pro nalezen√≠ element≈Ø p≈ôi p≈ôihl√°≈°en√≠
DOWNLOAD_TIMEOUT = 15  # timeout pro nalezen√≠ download tlaƒç√≠tka

# === Nastaven√≠ logov√°n√≠ ===
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('magisto_downloader.log'),
        logging.StreamHandler()
    ]
)

# === Nastaven√≠ prohl√≠≈æeƒçe ===
def get_brave_binary_path():
    """Najde cestu k Brave browseru na r≈Øzn√Ωch OS"""
    system = platform.system()
    
    if system == "Linux":
        brave_paths = [
            "/usr/bin/brave-browser",
            "/usr/bin/brave",
            "/snap/brave/current/usr/bin/brave",
            "/var/lib/flatpak/app/com.brave.Browser/current/active/files/brave",
            "/usr/local/bin/brave-browser",
            "/opt/brave.com/brave/brave-browser"
        ]
    elif system == "Darwin":  # macOS
        brave_paths = [
            "/Applications/Brave Browser.app/Contents/MacOS/Brave Browser"
        ]
    elif system == "Windows":
        brave_paths = [
            "C:\\Program Files\\BraveSoftware\\Brave-Browser\\Application\\brave.exe",
            "C:\\Program Files (x86)\\BraveSoftware\\Brave-Browser\\Application\\brave.exe",
            os.path.expanduser("~\\AppData\\Local\\BraveSoftware\\Brave-Browser\\Application\\brave.exe")
        ]
    else:
        return None
    
    for path in brave_paths:
        if os.path.exists(path):
            return path
    
    return None

def setup_browser_driver():
    """Nastaven√≠ prohl√≠≈æeƒçe (Chrome nebo Brave) s optimalizovan√Ωmi mo≈ænostmi"""
    options = Options()
    options.add_experimental_option("prefs", {
        "download.default_directory": DOWNLOAD_DIR,
        "download.prompt_for_download": False,
        "safebrowsing.enabled": True,
        "profile.default_content_setting_values.notifications": 2  # blokovat notifikace
    })
    options.add_argument("--start-maximized")
    options.add_argument("--disable-blink-features=AutomationControlled")
    options.add_experimental_option("excludeSwitches", ["enable-automation"])
    options.add_experimental_option('useAutomationExtension', False)
    
    # Vytvo≈ôen√≠ downloadovac√≠ slo≈æky
    os.makedirs(DOWNLOAD_DIR, exist_ok=True)
    
    if BROWSER_TYPE.lower() == "brave":
        # Nastaven√≠ pro Brave browser
        brave_path = get_brave_binary_path()
        if brave_path:
            options.binary_location = brave_path
            logging.info(f"Pokou≈°√≠m se pou≈æ√≠t Brave browser: {brave_path}")
            logging.warning("POZOR: Brave m≈Ø≈æe m√≠t probl√©my s verz√≠ ChromeDriveru!")
            logging.info("Pokud se vyskytnou chyby, zmƒõ≈à BROWSER_TYPE na 'chrome'")
        else:
            logging.error("Brave browser nebyl nalezen! P≈ôep√≠n√°m na Chrome...")
            logging.info("Nainstaluj Brave nebo zmƒõ≈à BROWSER_TYPE na 'chrome'")
    else:
        logging.info("Pou≈æ√≠v√°m Chrome browser")
    
    try:
        driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
        driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
        logging.info("Prohl√≠≈æeƒç √∫spƒõ≈°nƒõ spu≈°tƒõn!")
        return driver
    except Exception as e:
        logging.error(f"Chyba p≈ôi spu≈°tƒõn√≠ prohl√≠≈æeƒçe: {e}")
        if BROWSER_TYPE.lower() == "brave":
            logging.error("Probl√©m s Brave browserem - pravdƒõpodobnƒõ nekompatibiln√≠ verze ChromeDriveru")
            logging.info("≈òE≈†EN√ç: Zmƒõ≈à BROWSER_TYPE na 'chrome' v konfiguraci")
            logging.info("Nebo nainstaluj star≈°√≠ verzi Brave nebo novƒõj≈°√≠ verzi ChromeDriveru")
        raise

try:
    driver = setup_browser_driver()
    wait = WebDriverWait(driver, LOGIN_TIMEOUT)
except Exception as e:
    logging.error("Nelze spustit prohl√≠≈æeƒç. Ukonƒçuji script.")
    exit(1)

# === Pomocn√© funkce ===
def check_if_logged_in():
    """Kontrola, zda je u≈æivatel p≈ôihl√°≈°en"""
    try:
        # Kontrola r≈Øzn√Ωch indik√°tor≈Ø p≈ôihl√°≈°en√≠
        login_indicators = [
            # Pozitivn√≠ indik√°tory (kdy≈æ je p≈ôihl√°≈°en)
            "//a[contains(@href, '/video/mine')]",
            "//a[contains(@href, '/my-movies')]",
            "//button[contains(text(), 'Profile')]",
            "//div[contains(@class, 'user-menu')]",
            "[data-test-id*='user']",
            ".user-avatar",
            "//a[contains(text(), 'My Videos')]",
            "//a[contains(text(), 'Dashboard')]"
        ]
        
        for indicator in login_indicators:
            try:
                if indicator.startswith("//"):
                    element = driver.find_element(By.XPATH, indicator)
                else:
                    element = driver.find_element(By.CSS_SELECTOR, indicator)
                if element:
                    logging.info(f"   ‚Üí Nalezen indik√°tor p≈ôihl√°≈°en√≠: {indicator}")
                    return True
            except:
                continue
        
        # Kontrola URL - pokud jsme p≈ôesmƒõrov√°ni na dashboard nebo podobnƒõ
        current_url = driver.current_url
        logged_in_patterns = ['/dashboard', '/video/', '/my-movies', '/profile']
        
        for pattern in logged_in_patterns:
            if pattern in current_url:
                logging.info(f"   ‚Üí URL indikuje p≈ôihl√°≈°en√≠: {current_url}")
                return True
        
        return False
        
    except Exception as e:
        logging.warning(f"Chyba p≈ôi kontrole p≈ôihl√°≈°en√≠: {e}")
        return False

# === KROK 1: P≈ôihl√°≈°en√≠ (Manual Login Support) ===
def login_to_magisto():
    """P≈ôihl√°≈°en√≠ na Magisto s podporou manu√°ln√≠ho p≈ôihl√°≈°en√≠"""
    logging.info("[1/5] Otev√≠r√°m Magisto login str√°nku...")
    
    try:
        # Pou≈æit√≠ p≈ô√≠m√© login URL pro manu√°ln√≠ p≈ôihl√°≈°en√≠
        driver.get("https://www.magisto.com/connect?q_offer_info=eyJpZCI6IjE0MDA1NDcwMjY5NzE3ODc1MzkiLCJleHBpcmF0aW9uIjoxNzUzNjgyMTc3ODQ4fQ%3D%3D")
        
        logging.info("üîê MANU√ÅLN√ç P≈òIHL√Å≈†EN√ç:")
        logging.info("   ‚Üí Otev≈ôel jsem login str√°nku")
        logging.info("   ‚Üí Pros√≠m, p≈ôihlas se ruƒçnƒõ v prohl√≠≈æeƒçi")
        logging.info("   ‚Üí Po p≈ôihl√°≈°en√≠ stiskni ENTER v termin√°lu pro pokraƒçov√°n√≠...")
        
        # ƒåek√°n√≠ na manu√°ln√≠ potvrzen√≠
        input("Stiskni ENTER po dokonƒçen√≠ p≈ôihl√°≈°en√≠...")
        
        # Kontrola, zda je u≈æivatel p≈ôihl√°≈°en
        logged_in = check_if_logged_in()
        
        if logged_in:
            logging.info("‚úÖ P≈ôihl√°≈°en√≠ √∫spƒõ≈°n√©!")
            return True
        else:
            logging.error("‚ùå Zd√° se, ≈æe p≈ôihl√°≈°en√≠ se nezda≈ôilo")
            
            # Pokusit se o automatick√© p≈ôihl√°≈°en√≠ jako fallback
            logging.info("üîÑ Pokou≈°√≠m se o automatick√© p≈ôihl√°≈°en√≠...")
            return attempt_automatic_login()
            
    except Exception as e:
        logging.error(f"Chyba p≈ôi p≈ôihla≈°ov√°n√≠: {e}")
        return False

def attempt_automatic_login():
    """Pokus o automatick√© p≈ôihl√°≈°en√≠ jako fallback"""
    try:
        logging.info("Hled√°m login formul√°≈ô...")
        
        # Hled√°n√≠ login tlaƒç√≠tka nebo formul√°≈ôe
        login_selectors = [
            "//a[contains(text(),'Log in')]",
            "//a[contains(text(),'Sign in')]",
            "//button[contains(text(),'Log in')]",
            "//button[contains(text(),'Sign in')]",
            ".login-btn",
            "[data-test-id='login-button']",
            "input[name='email']"  # P≈ô√≠m√© hled√°n√≠ email pole
        ]
        
        login_element = None
        for selector in login_selectors:
            try:
                if selector.startswith("//"):
                    login_element = WebDriverWait(driver, 5).until(
                        EC.presence_of_element_located((By.XPATH, selector))
                    )
                else:
                    login_element = WebDriverWait(driver, 5).until(
                        EC.presence_of_element_located((By.CSS_SELECTOR, selector))
                    )
                break
            except TimeoutException:
                continue
        
        if not login_element:
            logging.warning("Login formul√°≈ô nebyl nalezen")
            return False
        
        # Pokud najdeme p≈ô√≠mo email pole, jsme u≈æ na login str√°nce
        if login_element.get_attribute("name") == "email":
            email_input = login_element
        else:
            # Kliknout na login tlaƒç√≠tko
            login_element.click()
            time.sleep(3)
            # Naj√≠t email pole
            email_input = WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.NAME, "email"))
            )
        
        password_input = driver.find_element(By.NAME, "password")
        
        email_input.clear()
        email_input.send_keys(MAGISTO_EMAIL)
        password_input.clear()
        password_input.send_keys(MAGISTO_PASSWORD)
        password_input.send_keys(Keys.RETURN)
        
        # Poƒçk√°n√≠ na p≈ôihl√°≈°en√≠
        time.sleep(8)
        return check_if_logged_in()
        
    except Exception as e:
        logging.error(f"Automatick√© p≈ôihl√°≈°en√≠ selhalo: {e}")
        return False

# Spu≈°tƒõn√≠ p≈ôihl√°≈°en√≠
logging.info("üöÄ Zaƒç√≠n√°m proces p≈ôihl√°≈°en√≠...")

# Nejd≈ô√≠ve zkontrolovat, jestli u≈æ nejsme p≈ôihl√°≈°eni
if check_if_logged_in():
    logging.info("‚úÖ U≈æ jste p≈ôihl√°≈°eni! P≈ôeskakuji login proces.")
else:
    if not login_to_magisto():
        logging.error("‚ùå P≈ôihl√°≈°en√≠ selhalo, ukonƒçuji script")
        driver.quit()
        exit(1)

# === KROK 2: Naƒç√≠st videa (nekoneƒçn√© scrollov√°n√≠) ===
def load_all_videos():
    """Naƒçten√≠ v≈°ech vide√≠ pomoc√≠ nekoneƒçn√©ho scrollov√°n√≠"""
    logging.info("[2/5] Naƒç√≠t√°m videa...")
    
    current_url = driver.current_url
    logging.info(f"Aktu√°ln√≠ URL po p≈ôihl√°≈°en√≠: {current_url}")
    
    # Nejd≈ô√≠ve zkontrolovat, zda u≈æ nejsme na str√°nce s videi
    if '/video/' in current_url or '/my-movies' in current_url or 'mine' in current_url:
        logging.info("‚úÖ U≈æ jsme na str√°nce s videi! P≈ôeskakuji navigaci.")
        # Zkusit naj√≠t videa na aktu√°ln√≠ str√°nce
        if check_for_videos_on_page():
            logging.info("‚úÖ Videa nalezena na aktu√°ln√≠ str√°nce")
        else:
            logging.info("‚ö†Ô∏è Na aktu√°ln√≠ str√°nce nejsou videa, zkou≈°√≠m jin√© URL...")
            return try_alternative_video_urls()
    else:
        # Pokud nejsme na str√°nce s videi, zkusit navigovat
        logging.info("üìç Navigace na str√°nku s videi...")
        return try_alternative_video_urls()
    
    # Nekoneƒçn√© scrollov√°n√≠ na aktu√°ln√≠ str√°nce
    return perform_infinite_scroll_and_collect()

def check_for_videos_on_page():
    """Zkontroluje, zda jsou na aktu√°ln√≠ str√°nce videa"""
    try:
        video_selectors = [
            "a[data-test-id='movie-card']",
            "a[data-testid*='movie']",
            "a[data-testid*='video']",
            ".video-card",
            ".movie-card",
            "a[href*='/video/']",
            "a[href*='/movie/']",
            "[data-test*='video']",
            "[data-test*='movie']"
        ]
        
        for selector in video_selectors:
            try:
                elements = driver.find_elements(By.CSS_SELECTOR, selector)
                if elements:
                    logging.info(f"   ‚Üí Nalezeno {len(elements)} vide√≠ pomoc√≠ selektoru: {selector}")
                    return True
            except:
                continue
        
        return False
    except Exception as e:
        logging.warning(f"Chyba p≈ôi kontrole vide√≠: {e}")
        return False

def try_alternative_video_urls():
    """Zkus√≠ r≈Øzn√© URL pro str√°nku s videi"""
    video_urls_to_try = [
        # Nezkou≈°et znovu aktu√°ln√≠ URL pokud u≈æ tam jsme
        None,  # placeholder pro aktu√°ln√≠ URL
        "https://www.magisto.com/video/mine",
        "https://www.magisto.com/my-movies",
        "https://www.magisto.com/videos",
        "https://www.magisto.com/dashboard",
        "https://www.magisto.com/library",
        "https://www.magisto.com/home"
    ]
    
    current_url = driver.current_url
    
    # Pokud u≈æ jsme na nƒõkter√© z target URL, zaƒç√≠t p≈ô√≠mo scrollov√°n√≠m
    for target_url in video_urls_to_try[1:]:  # Skip None placeholder
        if target_url and target_url in current_url:
            logging.info(f"‚úÖ U≈æ jsme na target URL: {current_url}")
            return perform_infinite_scroll_and_collect()
    
    # Zkusit navigovat na r≈Øzn√© URL
    for idx, url in enumerate(video_urls_to_try[1:], 1):  # Skip None placeholder
        try:
            logging.info(f"üîÑ Zkou≈°√≠m URL {idx}: {url}")
            driver.get(url)
            time.sleep(5)
            
            # Kontrola, zda se str√°nka naƒçetla √∫spƒõ≈°nƒõ
            if "error" in driver.title.lower() or "not found" in driver.page_source.lower():
                logging.warning(f"   ‚ùå URL {url} vr√°til chybu")
                continue
            
            # Kontrola, zda jsou videa na str√°nce
            if check_for_videos_on_page():
                logging.info(f"‚úÖ √öspƒõ≈°nƒõ naƒçteno na URL: {url}")
                return perform_infinite_scroll_and_collect()
            else:
                logging.info(f"   ‚ö†Ô∏è Na URL {url} nejsou videa")
                
        except Exception as e:
            logging.warning(f"   ‚ùå URL {url} selhalo: {e}")
            continue
    
    logging.error("‚ùå Nepoda≈ôilo se naƒç√≠st ≈æ√°dnou str√°nku s videi")
    return []

def perform_infinite_scroll_and_collect():
    """Provede nekoneƒçn√© scrollov√°n√≠ a sebere v≈°echna videa"""
    logging.info("üîÑ Spou≈°t√≠m nekoneƒçn√© scrollov√°n√≠...")
    
    # Nekoneƒçn√© scrollov√°n√≠
    last_height = driver.execute_script("return document.body.scrollHeight")
    scroll_tries = 0
    MAX_SCROLL_TRIES = 15
    
    while scroll_tries < MAX_SCROLL_TRIES:
        driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
        time.sleep(3)
        new_height = driver.execute_script("return document.body.scrollHeight")
        
        if new_height == last_height:
            scroll_tries += 1
            logging.info(f"   üìú Scroll pokus {scroll_tries}/{MAX_SCROLL_TRIES}")
        else:
            scroll_tries = 0
            last_height = new_height
            logging.info("   üìú Naƒç√≠t√°m dal≈°√≠ videa...")
    
    logging.info("[3/5] ‚úÖ Scrollov√°n√≠ dokonƒçeno, sb√≠r√°m odkazy na videa...")
    
    # Nalezen√≠ v≈°ech video odkaz≈Ø pomoc√≠ r≈Øzn√Ωch selector≈Ø
    video_selectors = [
        "a[data-test-id='movie-card']",
        "a[data-testid*='movie']",
        "a[data-testid*='video']",
        ".video-card a",
        ".movie-card a", 
        "a[href*='/video/']",
        "a[href*='/movie/']",
        "[data-test*='video'] a",
        "[data-test*='movie'] a"
    ]
    
    all_video_links = []
    for selector in video_selectors:
        try:
            links = driver.find_elements(By.CSS_SELECTOR, selector)
            if links:
                logging.info(f"   ‚Üí Selector '{selector}': {len(links)} odkaz≈Ø")
            all_video_links.extend(links)
        except Exception as e:
            logging.debug(f"   ‚ö†Ô∏è Selector '{selector}' selhal: {e}")
            continue
    
    # Odstranƒõn√≠ duplik√°t≈Ø a z√≠sk√°n√≠ URL
    video_urls = []
    seen_urls = set()
    
    for link in all_video_links:
        try:
            href = link.get_attribute("href")
            if href and href not in seen_urls:
                # Kontrola, zda URL obsahuje video identifik√°tor
                if any(pattern in href for pattern in ['/video/', '/movie/', '/watch/', '/view/']):
                    video_urls.append(href)
                    seen_urls.add(href)
        except:
            continue
    
    logging.info(f"üé¨ Nalezeno celkem {len(video_urls)} unik√°tn√≠ch vide√≠")
    
    # Zobrazit nƒõkolik p≈ô√≠klad≈Ø URL pro debugging
    if video_urls:
        logging.info("üìã P≈ô√≠klady nalezen√Ωch video URL:")
        for i, url in enumerate(video_urls[:3]):  # Zobrazit prvn√≠ch 5
            logging.info(f"   {i+1}. {url}")
        if len(video_urls) > 3:
            logging.info(f"   ... a dal≈°√≠ch {len(video_urls) - 3} vide√≠")
    
    return video_urls

video_urls = load_all_videos()

if not video_urls:
    logging.error("‚ùå Nebyla nalezena ≈æ√°dn√° videa.")
    logging.info("üîç DEBUG INFO:")
    logging.info(f"   Aktu√°ln√≠ URL: {driver.current_url}")
    logging.info(f"   Titulek str√°nky: {driver.title}")
    
    # V√Ωpis nƒõkolika element≈Ø na str√°nce pro debugging
    try:
        all_elements = driver.find_elements(By.CSS_SELECTOR, "a, button, div[class*='video'], div[class*='movie']")
        logging.info(f"   Celkem nalezeno {len(all_elements)} interaktivn√≠ch element≈Ø")
        
        # Zkusit naj√≠t jak√©koliv odkazy s 'video' nebo 'movie' v textu
        video_text_links = driver.find_elements(By.XPATH, "//a[contains(text(), 'video') or contains(text(), 'movie') or contains(text(), 'Video') or contains(text(), 'Movie')]")
        if video_text_links:
            logging.info(f"   Nalezeno {len(video_text_links)} odkaz≈Ø s 'video/movie' v textu")
        
        # Zkusit naj√≠t jak√©koliv obr√°zky, kter√© by mohly b√Ωt thumbnaily
        images = driver.find_elements(By.CSS_SELECTOR, "img")
        logging.info(f"   Nalezeno {len(images)} obr√°zk≈Ø na str√°nce")
        
        # Ulo≈æit screenshot pro debugging
        try:
            screenshot_path = "debug_page_screenshot.png"
            driver.save_screenshot(screenshot_path)
            logging.info(f"   üì∏ Screenshot ulo≈æen: {screenshot_path}")
        except:
            pass
        
    except Exception as e:
        logging.warning(f"   Chyba p≈ôi debugging: {e}")
    
    logging.info("üí° N√ÅVRHY:")
    logging.info("   1. Zkontroluj ruƒçnƒõ, zda vid√≠≈° videa v prohl√≠≈æeƒçi")
    logging.info("   2. Zkus jin√Ω browser nebo vyƒçistit cache")
    logging.info("   3. Magisto mo≈æn√° zmƒõnil strukturu str√°nky")
    
    driver.quit()
    exit(1)

# === KROK 3: St√°hni ka≈æd√© video ===
def download_video(video_url, video_index, total_videos):
    """St√°hnut√≠ jednoho videa s error handlingem"""
    logging.info(f"[4/5] ({video_index}/{total_videos}) Nav≈°tƒõvuji {video_url}")
    
    try:
        driver.get(video_url)
        time.sleep(5)
        
        # Mo≈æn√© selektory pro download tlaƒç√≠tko
        download_selectors = [
            "//button[contains(text(),'Download')]",
            "//button[contains(text(),'download')]",
            "//a[contains(text(),'Download')]",
            "//a[contains(text(),'download')]",
            "//button[contains(@class,'download')]",
            "//a[contains(@class,'download')]",
            "[data-test-id*='download']",
            "[data-testid*='download']",
            ".download-btn",
            ".download-button"
        ]
        
        download_btn = None
        download_wait = WebDriverWait(driver, DOWNLOAD_TIMEOUT)
        
        for selector in download_selectors:
            try:
                if selector.startswith("//"):
                    download_btn = download_wait.until(EC.element_to_be_clickable((By.XPATH, selector)))
                else:
                    download_btn = download_wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, selector)))
                break
            except TimeoutException:
                continue
        
        if download_btn:
            download_btn.click()
            logging.info("     ‚Üí Stahov√°n√≠ zah√°jeno...")
            time.sleep(WAIT_AFTER_DOWNLOAD)
            return True
        else:
            logging.warning("     ‚ùå Chyba: tlaƒç√≠tko 'Download' nenalezeno.")
            return False
            
    except Exception as e:
        logging.error(f"     ‚ùå Chyba p≈ôi zpracov√°n√≠ videa {video_url}: {e}")
        return False

# Hlavn√≠ loop pro stahov√°n√≠
successful_downloads = 0
failed_downloads = 0

for idx, url in enumerate(video_urls, 1):
    if download_video(url, idx, len(video_urls)):
        successful_downloads += 1
    else:
        failed_downloads += 1

logging.info(f"[5/5] ‚úÖ Hotovo! √öspƒõ≈°nƒõ sta≈æeno: {successful_downloads}, Selhalo: {failed_downloads}")
driver.quit()
